// Generated by CoffeeScript 1.10.0
var xml,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

xml = require('xml');

module.exports = function(env, callback) {
  var Sitemap;
  Sitemap = (function(superClass) {
    extend(Sitemap, superClass);

    function Sitemap() {
      return Sitemap.__super__.constructor.apply(this, arguments);
    }

    Sitemap.prototype.getFilename = function() {
      return 'sitemap.xml';
    };

    Sitemap.prototype.getPages = function(contents) {
      return env.helpers.contents.list(contents).filter(function(content) {
        return content instanceof env.plugins.MarkdownPage && !content.metadata.noindex && content.filepath.relative.indexOf('data/') !== 0;
      });
    };

    Sitemap.prototype.getView = function() {
      return function(env, locals, contents, templates, callback) {
        var i, len, page, ref, sitemap, url;
        sitemap = {
          'urlset': [
            {
              '_attr': {
                'xmlns': 'http://www.sitemaps.org/schemas/sitemap/0.9'
              }
            }
          ]
        };
        ref = this.getPages(contents);
        for (i = 0, len = ref.length; i < len; i++) {
          page = ref[i];
          url = [];
          url.push({
            'loc': "" + locals.url + page.url
          });
          if (page.metadata.date != null) {
            url.push({
              'lastmod': page.date.toISOString()
            });
          }
          if (page.metadata.changefreq != null) {
            url.push({
              'changefreq': page.metadata.changefreq
            });
          }
          if (page.metadata.priority != null) {
            url.push({
              'priority': page.metadata.priority
            });
          }
          sitemap.urlset.push({
            'url': url
          });
        }
        return callback(null, new Buffer(xml(sitemap, {
          'declaration': true
        })));
      };
    };

    return Sitemap;

  })(env.plugins.Page);
  env.registerGenerator('sitemap', function(contents, callback) {
    return callback(null, {
      'sitemap.xml': new Sitemap
    });
  });
  return callback();
};
